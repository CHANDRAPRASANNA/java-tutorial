
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class StackUsingLL {
    private Node top;
    private int size;

    public StackUsingLL() {
        top = null;
        size = 0;
    }

    public void push(int data) {
        Node newNode = new Node(data);
        newNode.next = top;
        top = newNode;
        size++;
    }

    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow - cannot pop from an empty stack");
        }
        int poppedData = top.data;
        top = top.next;
        size--;
        return poppedData;
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty - cannot peek");
        }
        return top.data;
    }

    public boolean isEmpty() {
        return top == null;
    }

    public int size() {
        return size;
    }

    public void count() {
        Node current = top;
        int ec = 0, oc = 0;
        while (current != null) {
            if (current.data % 2 == 0)
                ec++;
            else
                oc++;
            current = current.next;
        }
        System.out.println("Even count:" + ec + "  odd count:" + oc);
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty.");
            return;
        }
        Node current = top;
        System.out.print("Stack (top to bottom): ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        StackUsingLL stack = new StackUsingLL();

        stack.push(3);
        stack.push(5);
        stack.push(6);
        stack.display();
        stack.count();

    }
}
